<project name="common" xmlns:ivy="antlib:org.apache.ivy.ant">
    <property file="../build.properties"/>

    <property name="build.number" value="0.1"/>

    <echo message="*************************************" />
    <echo message="* Project Name: ${ant.project.name}" />
    <echo message="* Project Version: ${build.number}" />
    <echo message="*************************************" />
    <property name="project.name" value="${ant.project.name}" />

    <!-- Create directory into which artifacts will be pulled from Artifactory -->
    <mkdir dir="${lib.dir}" />
    <mkdir dir="${lib.dir.test}" />

    <property name="ivy.jar.dir" value="${user.home}/.ivy2/jars"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

    <target name="load-ivy">
        <mkdir dir="${ivy.jar.dir}"/>
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <path id="lib.path.id">
        <pathelement location="${build.classes.dir}"/>
        <fileset dir="${lib.dir}"/>
    </path>
    <path id="test.path.id">
        <pathelement location="${build.test.dir}"/>
        <path refid="lib.path.id"/>
    </path>
    <path id="run.path.id">
        <path refid="lib.path.id"/>
        <path location="${build.classes.dir}"/>
    </path>

    <!-- =================================
         target: resolve
         ================================= -->
    <target name="resolve" description="--> resolve and retrieve dependencies with ivy">
<!--        <ivy:settings/>-->
        <echo message="--> resolve and retrieve dependencies with ivy"/>
        <ivy:resolve file="${basedir}/ivy.xml"/>
        <ivy:retrieve pattern="${lib.dir}/[artifact]-[revision].[ext]" sync="true" type="jar, bundle"/>
<!--        <echo message="&ndash;&gt; resolve and retrieve dependencies with test-ivy"/>-->
<!--        <ivy:resolve file="${basedir}/test-ivy.xml"/>-->
<!--        <ivy:retrieve pattern="${lib.dir.test}/[artifact]-[revision].[ext]" sync="true" type="jar, bundle"/>-->
    </target>

    <!-- =================================
         target: report
         ================================= -->
    <target name="report" depends="resolve" description="--> generates a report of dependencies">
        <ivy:report todir="${report.dependencies.dir}"/>
    </target>

    <!-- =================================
         target: compile
         ================================= -->
    <target name="compile" depends="resolve" description="--> compile the project">
        <mkdir dir="${build.classes.dir}"/>
        <javac srcdir="${src.main.dir}" destdir="${build.classes.dir}" classpathref="lib.path.id" debug="true"
               includeAntRuntime="false" includes="**/*.java"/>
    </target>

    <!-- =================================
         target: test-compile
         ================================= -->
    <target name="test-compile" depends="compile" description="--> test compile the project">
        <mkdir dir="${build.test.dir}"/>
        <javac srcdir="${test.src.dir}" destdir="${build.test.dir}" classpathref="test.path.id" debug="true"
               includeAntRuntime="false" includes="**/*.java"/>
    </target>

    <target name="ivy-new-version" depends="load-ivy" unless="ivy.new.revision">
        <!-- default module version prefix value -->
        <property name="module.version.prefix" value="${module.version.target}"/>

        <!-- asks to ivy an available version number -->
        <ivy:info file="${ivy.file}"/>
        <ivy:buildnumber
                organisation="${ivy.organisation}" module="${ivy.module}"
                revision="${module.version.prefix}" defaultBuildNumber="0" revSep="."/>
    </target>

    <target name="local-version">
        <tstamp>
            <format property="now" pattern="yyyyMMddHHmmss"/>
        </tstamp>
        <property name="ivy.new.revision" value="${module.version.target}-local-${now}"/>
    </target>

    <target name="version" depends="ivy-new-version">
        <!-- create version file in classpath for later inclusion in jar -->
        <mkdir dir="${build.classes.dir}"/>
        <echo message="version=${ivy.new.revision}" file="${build.classes.dir}/${ant.project.name}.properties" append="false"/>

        <!-- load generated version properties file -->
        <property file="${build.classes.dir}/${ant.project.name}.properties"/>
    </target>

    <!-- =================================
         target: jar
         ================================= -->
    <target name="jar" depends="version, compile" description="--> make a jar file for this project">
        <jar destfile="${jar.file}">
            <fileset dir="${build.classes.dir}"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Build-Version" value="${build.number}"/>
            </manifest>
        </jar>
    </target>

    <!-- =================================
         target: publish
         ================================= -->
    <target name="publish" depends="clean-build, jar" description="--> publish this project in the ivy repository">
        <ivy:publish artifactspattern="${build.dir}/[artifact].[ext]"
                     resolver="shared"
                     pubrevision="${version}"
                     status="release"/>
        <echo message="project ${ant.project.name} released with version ${version}"/>
    </target>

    <!-- =================================
         target: publish-local
         ================================= -->
    <target name="publish-local" depends="local-version, jar" description="--> publish this project in the local ivy repository">
        <ivy:publish artifactspattern="${build.dir}/[artifact].[ext]"
                     resolver="local"
                     pubrevision="${version}"
                     pubdate="${now}"
                     status="integration"
                     forcedeliver="true"/>
        <echo message="project ${ant.project.name} published locally with version ${version}"/>
    </target>

    <!-- =================================
         target: clean-local
         ================================= -->
    <target name="clean-local" depends="load-ivy"
            description="--> cleans the local repository for the current module">
        <ivy:info file="${ivy.file}"/>
        <delete dir="${ivy.local.default.root}/${ivy.organisation}/${ivy.module}"/>
    </target>

    <!-- =================================
         target: clean-lib
         ================================= -->
    <target name="clean-lib" description="--> clean the project libraries directory (dependencies)">
        <echo message="--> clean the project libraries directory (dependencies)"/>
        <delete includeemptydirs="true">
            <fileset dir="${lib.dir}" includes="*.jar"/>
            <fileset dir="${lib.dir.test}" includes="*.jar"/>
        </delete>
    </target>

    <!-- =================================
         target: clean-build
         ================================= -->
    <target name="clean-build" description="--> clean the project built files">
        <delete includeemptydirs="true" dir="/build"/>
    </target>

    <!-- =================================
         target: clean
         ================================= -->
    <target name="clean" depends="clean-build,clean-lib" description="--> clean the project"/>

    <!-- =================================
     target: test
     ================================= -->
    <target name="test" depends="test-compile">
        <property name="myclasspath" refid="test.path.id" />
        <echo message="classpath= ${myclasspath}" />
        <mkdir dir="${test.report}" />
        <junit printsummary="yes">
            <classpath>
                <path refid="test.path.id"/>
            </classpath>
            <formatter type="xml" />
            <batchtest fork="yes" todir="${test.report}">
                <fileset dir="${test.src.dir}">
                    <include name="**/*Test.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>
</project>